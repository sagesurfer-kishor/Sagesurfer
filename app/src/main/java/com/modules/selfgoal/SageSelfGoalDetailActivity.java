package com.modules.selfgoal;import android.annotation.SuppressLint;import android.app.ActivityOptions;import android.app.DatePickerDialog;import android.app.Dialog;import android.app.DialogFragment;import android.app.Fragment;import android.app.FragmentTransaction;import android.content.Intent;import android.graphics.drawable.ColorDrawable;import android.os.Bundle;import androidx.cardview.widget.CardView;import androidx.core.content.ContextCompat;import androidx.appcompat.app.AppCompatActivity;import androidx.appcompat.widget.AppCompatImageButton;import androidx.appcompat.widget.Toolbar;import android.util.Log;import android.view.LayoutInflater;import android.view.View;import android.view.Window;import android.view.WindowManager;import android.widget.Button;import android.widget.CheckedTextView;import android.widget.DatePicker;import android.widget.EditText;import android.widget.ImageView;import android.widget.LinearLayout;import android.widget.RelativeLayout;import android.widget.TextView;import android.widget.Toast;import com.bumptech.glide.Glide;import com.bumptech.glide.load.engine.DiskCacheStrategy;import com.bumptech.glide.request.RequestOptions;import com.google.gson.JsonArray;import com.google.gson.JsonObject;import com.modules.selfgoal.werhope_self_goal.activity.GoalLogBookActivity;import com.modules.selfgoal.werhope_self_goal.activity.HourlyDailyLogBookActivity;import com.sagesurfer.collaborativecares.BuildConfig;import com.sagesurfer.collaborativecares.R;import com.sagesurfer.constant.Actions_;import com.sagesurfer.constant.General;import com.sagesurfer.datetime.Compare;import com.sagesurfer.datetime.GetTime;import com.sagesurfer.interfaces.GoalDetailsInterface;import com.sagesurfer.library.CheckRole;import com.sagesurfer.library.GetColor;import com.sagesurfer.models.Goal_;import com.sagesurfer.network.NetworkCall_;import com.sagesurfer.network.Urls_;import com.sagesurfer.parser.GetJson_;import com.sagesurfer.parser.SelfGoal_;import com.sagesurfer.snack.ShowToast;import com.storage.preferences.AddGoalPreferences;import com.storage.preferences.Preferences;import org.json.JSONArray;import org.json.JSONObject;import java.text.ParseException;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.Calendar;import java.util.Date;import java.util.HashMap;import java.util.Objects;import okhttp3.RequestBody;public class SageSelfGoalDetailActivity extends AppCompatActivity implements GoalDetailsInterface {    private static final String TAG = SageSelfGoalDetailActivity.class.getSimpleName();    private TextView mTxtGoalName, mTxtGoalDescription, mTxtGoalDescriptionSentence, mTxtQuestion, mTxtDateSelection, mTxtGoalFromeDateValue, mTxtGoalToDateValue;    private TextView mTxtGoalFrequencyValue, mTxtGoalCountValue, mTxtGoalOccurrencesValue, mTxtGoalCountDate;    private TextView mTxtYes, mTxtNo, mTxtMileStoneCount;    private Goal_ goal_;    private String mYesNoAnswer;    private String count_date = "";    private int mYear = 0, mMonth = 0, mDay = 0;    private int sYear, sMonth, sDay;    private ArrayList<CountListModel_> arryCountList = new ArrayList<>();    private ArrayList<HashMap<String, String>> milestoneList = new ArrayList<>();    private String mTodayDate = "", mGoalID, mMainGoalID;    private Button mButtonSubmit;    private int mGoalCurrentStatus, mGoalStatus, mGoalType;    private RelativeLayout mRelativeLayoutChooseDate, mRelativeLayoutDescription, mRelativeLayoutCountDate, mRelativeLayoutCountTime;    private Date CurrentDate, StartDate;    private String mCurrentDate;    private SimpleDateFormat sdfDate;    private ImageView mImageViewSelfGoalDetailImage, mTxtGoalAddCount, mImageViewMileStoneNext;    private Toolbar activityToolbar;    private AppCompatImageButton imageButtonToolbarSubmit, imageButtonToolbarEdit, imagebuttonLogBook, imageButtonToolbarDelete;    private ArrayList<Goal_> goalArrayList = new ArrayList<>();    private LinearLayout mLinearLayoutYesNo, mLinearLayoutDividerLine, mLinearLayoutMsgTitle, mLinearLayoutForCountItem, mLinearLayoutSubmit, mLinearLayoutMileStone;    private LinearLayout mLinearLayoutLoogBook, mLinearLayoutComplete, mLinearLayoutEdit, mLinearLayoutDelete, mLinearLayoutCountView, mLinearLayoutQuestionSection, mLinearLayoutAllQuestionSection;    private EditText mEditGoalCount;    private String old_date = "";    private String count_time = "00:00:00";    private CardView mCardViewQuestionSection, mCardViewMileStone;    TextView textViewSelfGoalDetailsActivityCountTime;    private LinearLayout mLinearLayoutFrequency, mLinearLayoutCount, mLinearLayoutOccurrences;    private boolean isNeedToSetTimeWhileAddingCount = false;    @SuppressLint("RestrictedApi")    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        //For setting status bar color        Window window = getWindow();        window.clearFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);        window.addFlags(WindowManager.LayoutParams.FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS);        window.setStatusBarColor(ContextCompat.getColor(this, GetColor.getHomeIconBackgroundColorColorParse(false)));        this.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_HIDDEN);        setContentView(R.layout.sage_self_goal_layout);        activityToolbar = (Toolbar) findViewById(R.id.activity_toolbar_layout);        setSupportActionBar(activityToolbar);        assert getSupportActionBar() != null;        getSupportActionBar().setDisplayHomeAsUpEnabled(true);        getSupportActionBar().setDefaultDisplayHomeAsUpEnabled(false);        activityToolbar.setNavigationIcon(R.drawable.vi_left_arrow_white);        activityToolbar.setNavigationOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                onBackPressed();            }        });        intiFunction();        Intent data = getIntent();        if (data != null && data.hasExtra(Actions_.MY_GOAL)) {            goal_ = (Goal_) data.getSerializableExtra(Actions_.MY_GOAL);            mGoalID = String.valueOf(goal_.getId());            mMainGoalID = goal_.getMain_goal_id();            mGoalCurrentStatus = goal_.getGoal_current_status();            mGoalStatus = goal_.getGoal_status();            mGoalType = goal_.getGoal_type();        }        Calendar c = Calendar.getInstance();        mYear = c.get(Calendar.YEAR);        mMonth = c.get(Calendar.MONTH);        mDay = c.get(Calendar.DAY_OF_MONTH);        count_date = mYear + "-" + (mMonth + 1) + "-" + mDay;        setDataFunction();        onClickEvent();    }    // TODO : Initialize All Variable in this Function    private void intiFunction() {        mTxtGoalName = findViewById(R.id.txt_goal_name);        mTxtGoalFromeDateValue = findViewById(R.id.txt_goal_from_date_value);        mTxtGoalToDateValue = findViewById(R.id.txt_goal_to_date_value);        mTxtGoalDescription = findViewById(R.id.txt_goal_description);        mTxtGoalDescriptionSentence = findViewById(R.id.txt_goal_description_sentence);        mTxtGoalFrequencyValue = findViewById(R.id.txt_goal_freq_value);        mTxtGoalCountValue = findViewById(R.id.txt_goal_count_value);        mTxtGoalOccurrencesValue = findViewById(R.id.txt_goal_occurr_value);        mEditGoalCount = findViewById(R.id.edit_count);        mTxtGoalCountDate = findViewById(R.id.txt_date);        mTxtGoalAddCount = findViewById(R.id.image_view_add_count);        mTxtQuestion = findViewById(R.id.txt_question);        mTxtDateSelection = findViewById(R.id.txt_choose_date);        mTxtYes = findViewById(R.id.txt_yes);        mTxtNo = findViewById(R.id.txt_no);        mTxtMileStoneCount = findViewById(R.id.textview_milestone_count);        textViewSelfGoalDetailsActivityCountTime = findViewById(R.id.textview_selfgoaldetailsactivity_count_time);        mButtonSubmit = findViewById(R.id.button_submit);        mImageViewSelfGoalDetailImage = findViewById(R.id.imageview_selfgoaldetailsactivity_image);        mImageViewMileStoneNext = findViewById(R.id.imageview_milestone_next);        imagebuttonLogBook = findViewById(R.id.imagebutton_log_book);        imageButtonToolbarSubmit = findViewById(R.id.imagebutton_toolbar_submit);        imageButtonToolbarEdit = findViewById(R.id.imagebutton_toolbar_edit);        imageButtonToolbarDelete = findViewById(R.id.imagebutton_toolbar_delete);        mLinearLayoutSubmit = findViewById(R.id.submit_btn_layout);        mLinearLayoutYesNo = findViewById(R.id.linear_layout_yes_no);        mLinearLayoutDividerLine = findViewById(R.id.linear_layout_divider_line);        mLinearLayoutMsgTitle = findViewById(R.id.linear_msg_title);        mLinearLayoutForCountItem = findViewById(R.id.linearlayout_create_goal_count_item);        mLinearLayoutMileStone = findViewById(R.id.linear_layout_milestone);        mLinearLayoutLoogBook = findViewById(R.id.linear_layout_logbook);        mLinearLayoutComplete = findViewById(R.id.linear_layout_complete);        mLinearLayoutEdit = findViewById(R.id.linear_layout_edit);        mLinearLayoutDelete = findViewById(R.id.linear_layout_delete);        mLinearLayoutCountView = findViewById(R.id.linear_layout_card_view_count);        mLinearLayoutAllQuestionSection = findViewById(R.id.linear_layout_card_view);        mLinearLayoutQuestionSection = findViewById(R.id.linear_layout_question_section);        mLinearLayoutFrequency = findViewById(R.id.linear_layout_frequency);        mLinearLayoutCount = findViewById(R.id.linear_layout_count);        mLinearLayoutOccurrences = findViewById(R.id.linear_layout_occurrences);        mRelativeLayoutChooseDate = findViewById(R.id.relative_choose_date);        mRelativeLayoutDescription = findViewById(R.id.relative_layout_description);        mRelativeLayoutCountDate = findViewById(R.id.relative_layout_count_date);        mRelativeLayoutCountTime = findViewById(R.id.relative_layout_time);        mCardViewMileStone = findViewById(R.id.card_view_milestone);        mCardViewQuestionSection = findViewById(R.id.card_view_question_section);    }    // TODO : Set All Data into this Function    private void setDataFunction() {        getToDayDate();        mTxtGoalName.setText(goal_.getName());        // TODO : date when goal is started and goal is Ended        String start_date = GetTime.month_DdYyyy(goal_.getStart_date());        String end_date = GetTime.month_DdYyyy(goal_.getEnd_date());        mTxtGoalFromeDateValue.setText(start_date);        mTxtGoalToDateValue.setText(end_date);        String frequency = goal_.getFrequency();        dateFunction(start_date);        if (frequency.length() <= 0) {            mTxtGoalFrequencyValue.setText("-NA-");        } else {            mTxtGoalFrequencyValue.setText(frequency);        }        int count = goal_.getQuantity();        if (frequency.length() <= 0) {            mTxtGoalCountValue.setText("-NA-");        } else {            mTxtGoalCountValue.setText(String.valueOf(count));        }        mTxtGoalOccurrencesValue.setText(String.valueOf(goal_.getOccurrences()));        if (goal_.getDescription().equalsIgnoreCase("")) {            mTxtGoalDescription.setText("-NA-");        } else {            mTxtGoalDescription.setText(goal_.getDescription());        }        if (frequency.equalsIgnoreCase(this.getResources().getString(R.string.hour)) || frequency.equalsIgnoreCase("hour")) {            mRelativeLayoutCountTime.setVisibility(View.VISIBLE);        } else {            mRelativeLayoutCountTime.setVisibility(View.GONE);        }        if (!frequency.isEmpty()) {            if (frequency.equalsIgnoreCase(this.getResources().getString(R.string.hour)) || frequency.equalsIgnoreCase("hour")) {                isNeedToSetTimeWhileAddingCount = true;            }        }        mTxtQuestion.setText(goal_.getDescription());        String[] time = goal_.getStart_time().split(":");        AddGoalPreferences.save(General.NAME, goal_.getName(), TAG);        AddGoalPreferences.save(General.START_MINUTE, time[1], TAG);        AddGoalPreferences.save(General.START_HOUR, time[0], TAG);        // TODO : set sentence        mTxtGoalDescriptionSentence.setText(CreateSentence_.make_sentence(String.valueOf(goal_.getType()),                String.valueOf(goal_.getQuantity()), goal_.getUnits(), frequency,                goal_.getStart_date(), goal_.getEnd_date(),                goal_.getFrequency_unit(), String.valueOf(goal_.getOccurrences())));        String imageUrl = goal_.getImage();        if (imageUrl != null) {            Glide.with(this)                    .load(imageUrl)                    .apply(new RequestOptions()                            .placeholder(R.drawable.ic_goal_placeholder)                            .diskCacheStrategy(DiskCacheStrategy.ALL)) //.RESULT                    .into(mImageViewSelfGoalDetailImage);        } else {            Glide.with(this)                    .load(imageUrl)                    .apply(new RequestOptions()                            .placeholder(R.drawable.ic_goal_placeholder)                            .diskCacheStrategy(DiskCacheStrategy.ALL)) //.RESULT                    .into(mImageViewSelfGoalDetailImage);        }        mYesNoAnswer = mTxtYes.getTag().toString();        getList();        if (CheckRole.isYouth(Integer.parseInt(Preferences.get(General.ROLE_ID)))) {            if ((Preferences.get(General.DOMAIN_CODE).equalsIgnoreCase(getResources().getString(R.string.sage023)) ||                    Preferences.get(General.DOMAIN_CODE).equalsIgnoreCase(getResources().getString(R.string.sage025)) ||                    Preferences.get(General.DOMAIN_CODE).equalsIgnoreCase(getResources().getString(R.string.sage024)) ||                    Preferences.get(General.DOMAIN_CODE).equalsIgnoreCase(getResources().getString(R.string.sage030)) ||                    Preferences.get(General.DOMAIN_CODE).equalsIgnoreCase(getResources().getString(R.string.sage031)))                    && mGoalType == General.GOAL_TYPE_GLOBULE) {                mLinearLayoutAllQuestionSection.setVisibility(View.VISIBLE);//                mLinearLayoutCountView.setVisibility(View.GONE);                mRelativeLayoutDescription.setVisibility(View.GONE);                mRelativeLayoutCountDate.setVisibility(View.GONE);                // TODO : if goalStatus and currentGoalStatus is equal to  GOAL_STATUS_TYPE_RUNNING then show (yes or no, count date and submit button)                if (mGoalStatus == General.GOAL_STATUS_TYPE_RUNNING && mGoalCurrentStatus == General.GOAL_STATUS_TYPE_RUNNING) {                    mLinearLayoutYesNo.setVisibility(View.VISIBLE);                    mRelativeLayoutChooseDate.setVisibility(View.VISIBLE);                    mLinearLayoutSubmit.setVisibility(View.VISIBLE);                    mLinearLayoutDividerLine.setVisibility(View.VISIBLE);                } else {                    mLinearLayoutYesNo.setVisibility(View.GONE);                    mRelativeLayoutChooseDate.setVisibility(View.GONE);                    mLinearLayoutSubmit.setVisibility(View.GONE);                    mLinearLayoutQuestionSection.setVisibility(View.VISIBLE);                    mLinearLayoutDividerLine.setVisibility(View.GONE);//                    mTxtQuestion.setVisibility(View.VISIBLE);                }                // TODO : if current date is before date then show msg Layout                if (CurrentDate.before(StartDate)) {                    mLinearLayoutMsgTitle.setVisibility(View.VISIBLE);                } else {                    mLinearLayoutMsgTitle.setVisibility(View.GONE);                }            } else {//                mCardViewQuestionSection.setVisibility(View.GONE);                mLinearLayoutAllQuestionSection.setVisibility(View.GONE);//                mLinearLayoutCountView.setVisibility(View.VISIBLE);                mRelativeLayoutDescription.setVisibility(View.VISIBLE);                mLinearLayoutSubmit.setVisibility(View.GONE);                // TODO : if goalStatus and currentGoalStatus is equal to  GOAL_STATUS_TYPE_RUNNING then show (count date section)                if (mGoalStatus == General.GOAL_STATUS_TYPE_RUNNING && mGoalCurrentStatus == General.GOAL_STATUS_TYPE_RUNNING) {                    mRelativeLayoutCountDate.setVisibility(View.VISIBLE);                } else {                    mRelativeLayoutCountDate.setVisibility(View.GONE);                }                // TODO : if current date is before date then show msg Layout and hide CountDate Section                if (CurrentDate.before(StartDate)) {                    mLinearLayoutMsgTitle.setVisibility(View.VISIBLE);                    mRelativeLayoutCountDate.setVisibility(View.GONE);                } else {                    mRelativeLayoutCountDate.setVisibility(View.VISIBLE);                    mLinearLayoutMsgTitle.setVisibility(View.GONE);                }            }            // TODO : Count , Frequency and Occurance show/hide condition.            if (goal_.getFrequency().length() > 0 || goal_.getQuantity() > 0 || goal_.getOccurrences() > 0) {                if (validateToShowFrequencyCountOcuuranceCell() == General.kHideFrequencyCell) {                    mLinearLayoutCountView.setVisibility(View.GONE);                } else if (validateToShowFrequencyCountOcuuranceCell() == General.kShowFrequencyCellWithAllComponent) {                    mLinearLayoutCountView.setVisibility(View.VISIBLE);                } else if (validateToShowFrequencyCountOcuuranceCell() == General.kShowFrequencyCellWithOnlyCount) {                    mLinearLayoutOccurrences.setVisibility(View.GONE);                } else if (validateToShowFrequencyCountOcuuranceCell() == General.kShowFrequencyCellWithOnlyOccurance) {                    mLinearLayoutCount.setVisibility(View.GONE);                }            } else {                mLinearLayoutCountView.setVisibility(View.GONE);            }        }        // TODO : Complete, Edit and Delete can be show or hide as per goal status        if (goal_.getGoal_status() == 1 || goal_.getGoal_status() == 2) { //0- running, 1- completed, 2- miss out            mRelativeLayoutCountDate.setVisibility(View.GONE);//            imageButtonToolbarSubmit.setVisibility(View.GONE);//            imagebuttonLogBook.setVisibility(View.GONE);            imageButtonToolbarEdit.setVisibility(View.GONE);            mLinearLayoutComplete.setVisibility(View.GONE);            mLinearLayoutEdit.setVisibility(View.GONE);        } else {//            imageButtonToolbarSubmit.setVisibility(View.VISIBLE);//            imagebuttonLogBook.setVisibility(View.VISIBLE);            imageButtonToolbarEdit.setVisibility(View.VISIBLE);            mLinearLayoutComplete.setVisibility(View.VISIBLE);            mLinearLayoutEdit.setVisibility(View.VISIBLE);        }        if (goal_.getIs_dashboard() == 1) {            imageButtonToolbarDelete.setVisibility(View.GONE);            mLinearLayoutDelete.setVisibility(View.GONE);        } else {            imageButtonToolbarDelete.setVisibility(View.VISIBLE);            mLinearLayoutDelete.setVisibility(View.VISIBLE);        }    }    // TODO : Count Frequecy and Occurance show hide function.    private int validateToShowFrequencyCountOcuuranceCell() {        if (mGoalType == General.GOAL_TYPE_BINARY) {            if (General.STR_ACTION_HOUR.toLowerCase().equalsIgnoreCase(goal_.getFrequency()) || goal_.getFrequency().equalsIgnoreCase("hour")) {                return General.kHideFrequencyCell;            } else if (General.STR_ACTION_DAY.toLowerCase().equalsIgnoreCase(goal_.getFrequency()) || General.STR_ACTION_DAY_PLAIN_DAY.toLowerCase().equalsIgnoreCase(goal_.getFrequency())) {                return General.kShowFrequencyCellWithOnlyOccurance;            } else if (General.STR_ACTION_WEEK.toLowerCase().equalsIgnoreCase(goal_.getFrequency())) {                return General.kShowFrequencyCellWithOnlyOccurance;            } else {                return General.kHideFrequencyCell;            }        } else if (mGoalType == General.GOAL_TYPE_NON_BINARY) {            if (General.STR_ACTION_HOUR.toLowerCase().equalsIgnoreCase(goal_.getFrequency()) || goal_.getFrequency().equalsIgnoreCase("hour")) {                return General.kShowFrequencyCellWithOnlyCount;            } else if (General.STR_ACTION_DAY.toLowerCase().equalsIgnoreCase(goal_.getFrequency()) || General.STR_ACTION_DAY_PLAIN_DAY.toLowerCase().equalsIgnoreCase(goal_.getFrequency())) {                return General.kShowFrequencyCellWithAllComponent;            } else if (General.STR_ACTION_WEEK.toLowerCase().equalsIgnoreCase(goal_.getFrequency())) {                return General.kShowFrequencyCellWithAllComponent;            } else {                return General.kShowFrequencyCellWithAllComponent;            }        }        return General.kHideFrequencyCell;    }    private void dateFunction(String start_date) {        sdfDate = new SimpleDateFormat("MMM dd, yyyy");        Date now = new Date();        mCurrentDate = sdfDate.format(now);        try {            CurrentDate = sdfDate.parse(mCurrentDate);            StartDate = sdfDate.parse(start_date);            Log.e("CurrentDate", "" + CurrentDate);            Log.e("StartDate", "" + StartDate);        } catch (ParseException e) {            e.printStackTrace();        }    }    // TODO : All Click Event Function e.g (yes or no  &&&&  am or pm  &&&&  submit button)    private void onClickEvent() {        mTxtYes.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View view) {                mTxtYes.setBackground(getResources().getDrawable(R.drawable.radio_yes_selector_green));                mTxtNo.setBackground(getResources().getDrawable(R.drawable.radio_no_selector_white));                mTxtYes.setTextColor(getResources().getColor(R.color.white));                mTxtNo.setTextColor(getResources().getColor(R.color.color_black));                mYesNoAnswer = mTxtYes.getTag().toString();            }        });        mTxtNo.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View view) {                mTxtNo.setBackground(getResources().getDrawable(R.drawable.radio_no_selector_green));                mTxtYes.setBackground(getResources().getDrawable(R.drawable.radio_yes_selector_white));                mTxtNo.setTextColor(getResources().getColor(R.color.white));                mTxtYes.setTextColor(getResources().getColor(R.color.color_black));                mYesNoAnswer = mTxtNo.getTag().toString();            }        });        mButtonSubmit.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View view) {                mTodayDate = mTxtDateSelection.getText().toString().trim();                if (mTodayDate.length() <= 0) {                    mTxtDateSelection.setError("Enter Valid Count");                    return;                }                if (count_date == null || count_date.length() <= 0) {                    ShowToast.toast("Enter Valid Date", getApplicationContext());                    return;                }                if (goal_.getFrequency().equalsIgnoreCase(getResources().getString(R.string.hour))                        || goal_.getFrequency().equalsIgnoreCase("hour")) {                    if (count_time == null || count_time.trim().length() <= 0 ||                            count_time.trim().equalsIgnoreCase("00:00:00")) {                        ShowToast.toast("Enter Valid Time", getApplicationContext());                        return;                    }                }                if (mYesNoAnswer.isEmpty()) {                    Toast.makeText(SageSelfGoalDetailActivity.this, "Please select answer.", Toast.LENGTH_SHORT).show();                    return;                }                // TODO : When Client click on submit button addCount Api called                addCount(mYesNoAnswer, mTodayDate, true);                mRelativeLayoutCountDate.setVisibility(View.GONE);            }        });        toolBarClickEvent();        navBarClickEvent();        mImageViewMileStoneNext.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View view) {                openMilestoneFragment();            }        });        mTxtGoalAddCount.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View view) {                String count = mEditGoalCount.getText().toString().trim();                if (count.length() <= 0) {//                    mEditGoalCount.setError("Enter Valid Count");                    ShowToast.toast("Enter Valid Count", getApplicationContext());                    return;                }                if (count_date == null || count_date.length() <= 0) {                    ShowToast.toast("Enter Valid Date", getApplicationContext());                    return;                }                if (goal_.getFrequency().equalsIgnoreCase(getResources().getString(R.string.hour))                        || goal_.getFrequency().equalsIgnoreCase("hour")) {                    if (count_time == null || count_time.trim().length() <= 0 ||                            count_time.trim().equalsIgnoreCase("00:00:00")) {                        ShowToast.toast("Enter Valid Time", getApplicationContext());                        return;                    }                }                if (old_date.equals(GetTime.month_DdYyyy(count_date))) {                    mEditGoalCount.setText("");                    mTxtGoalCountDate.setText("");                    textViewSelfGoalDetailsActivityCountTime.setText("");                    ShowToast.toast("Add only one goal for same date", getApplicationContext());                } else {                    // TODO : When Client click on Add Button (Plus icon) addCount Api called                    addCount(count, count_date, false);                }            }        });        mTxtGoalCountDate.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View view) {                count_date = null;                mTxtGoalCountDate.setHint(getApplicationContext().getResources().getString(R.string.date));                DatePickerDialog milestoneDatePicker = new DatePickerDialog(SageSelfGoalDetailActivity.this,                        new DatePickerDialog.OnDateSetListener() {                            @Override                            public void onDateSet(DatePicker view, int year,                                                  int monthOfYear, int dayOfMonth) {                                monthOfYear = (monthOfYear + 1);                                sDay = dayOfMonth;                                sMonth = monthOfYear;                                sYear = year;                                count_date = sYear + "-" + checkDigit(sMonth) + "-" + checkDigit(sDay);                                try {                                    if (Compare.dateInRange(goal_.getStart_date(), goal_.getEnd_date(), count_date)) {                                        mTxtGoalCountDate.setText(GetTime.month_DdYyyy(count_date));                                        mTxtGoalCountDate.setTextColor(getApplicationContext()                                                .getResources().getColor(R.color.text_color_primary));                                    } else {                                        count_date = null;                                        mTxtGoalCountDate.setHint(getApplicationContext().getResources().getString(R.string.date));                                        ShowToast.toast("Date out of range", getApplicationContext());                                    }                                } catch (ParseException e) {                                    e.printStackTrace();                                }                            }                        }, mYear, mMonth, mDay);                Calendar c = Calendar.getInstance();                c.add(Calendar.DAY_OF_WEEK, -6);                milestoneDatePicker.getDatePicker().setMaxDate(System.currentTimeMillis());                milestoneDatePicker.show();            }        });        mTxtDateSelection.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View view) {                count_date = null;                mTxtDateSelection.setHint(getApplicationContext().getResources().getString(R.string.date));                DatePickerDialog milestoneDatePicker1 = new DatePickerDialog(SageSelfGoalDetailActivity.this,                        new DatePickerDialog.OnDateSetListener() {                            @Override                            public void onDateSet(DatePicker view, int year,                                                  int monthOfYear, int dayOfMonth) {                                monthOfYear = (monthOfYear + 1);                                sDay = dayOfMonth;                                sMonth = monthOfYear;                                sYear = year;                                count_date = sYear + "-" + checkDigit(sMonth) + "-" + checkDigit(sDay);                                try {                                    if (Compare.dateInRange(goal_.getStart_date(), goal_.getEnd_date(), count_date)) {                                        //show_count_date = checkDigit(sMonth) + "-" + checkDigit(sDay) + "-" + sYear;                                        mTxtDateSelection.setText(GetTime.yy_mm_dd(count_date));                                        mTxtDateSelection.setTextColor(getApplicationContext()                                                .getResources().getColor(R.color.text_color_primary));                                    } else {                                        count_date = null;                                        mTxtDateSelection.setHint(getApplicationContext().getResources().getString(R.string.date));                                        ShowToast.toast("Date out of range", getApplicationContext());                                    }                                } catch (ParseException e) {                                    e.printStackTrace();                                }                            }                        }, mYear, mMonth, mDay);               /* Calendar c1 = Calendar.getInstance();                c1.add(Calendar.DAY_OF_WEEK, -6);                milestoneDatePicker1.getDatePicker().setMaxDate(System.currentTimeMillis());*/                milestoneDatePicker1.getDatePicker().setMaxDate(System.currentTimeMillis());                milestoneDatePicker1.show();            }        });        textViewSelfGoalDetailsActivityCountTime.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View view) {                openDialog();            }        });    }    @SuppressLint("CommitTransaction")    private void openDialog() {        FragmentTransaction fragmentTransaction = getFragmentManager().beginTransaction();        Fragment frag = getFragmentManager().findFragmentByTag(General.TIMESTAMP);        if (frag != null) {            fragmentTransaction.remove(frag);        }        fragmentTransaction.addToBackStack(null);        TimeHourPickerDialogFragment dialogFrag = new TimeHourPickerDialogFragment();        Bundle bundle = new Bundle();        bundle.putString(General.FREQUENCY, "details");        bundle.putString(General.DESCRIPTION, "1");        bundle.putBoolean(General.IS_NOW_VISIBLE, true);        dialogFrag.setArguments(bundle);        dialogFrag.show(getSupportFragmentManager(), General.TIMESTAMP);    }    // TODO : navigation bar ItemClick Event    private void navBarClickEvent() {        mLinearLayoutLoogBook.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View view) {                if (goal_.getFrequency().equalsIgnoreCase("hour")) {                    Intent logBook = new Intent(getApplicationContext(), HourlyDailyLogBookActivity.class);                    logBook.putExtra("map", goal_);                    startActivity(logBook);                    finish();                } else {                    Intent logBook = new Intent(getApplicationContext(), GoalLogBookActivity.class);                    logBook.putExtra("map", goal_);                    startActivity(logBook);                    finish();                }            }        });        mLinearLayoutComplete.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View view) {                answerConfirmation();            }        });        mLinearLayoutEdit.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View view) {                Bundle bundleAnimation = ActivityOptions.makeCustomAnimation(getApplicationContext(), R.anim.animation_one, R.anim.animation_two).toBundle();                Intent addIntent = new Intent(getApplicationContext(), AddGoalActivity.class);                addIntent.putExtra("map", goal_);                addIntent.putExtra(General.TITLE, getApplicationContext().getResources().getString(R.string.edit));                startActivity(addIntent, bundleAnimation);                finish();            }        });        mLinearLayoutDelete.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View view) {                if (goal_.getIs_dashboard() != 1)                    deleteConfirmation();            }        });    }    // TODO : toolbar ItemClick Event    private void toolBarClickEvent() {        imagebuttonLogBook.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View view) {                if (goal_.getFrequency().equalsIgnoreCase("hour")) {                    Intent logBook = new Intent(getApplicationContext(), HourlyDailyLogBookActivity.class);                    logBook.putExtra("map", goal_);                    startActivity(logBook);                    finish();                } else {                    Intent logBook = new Intent(getApplicationContext(), GoalLogBookActivity.class);                    logBook.putExtra("map", goal_);                    startActivity(logBook);                    finish();                }            }        });        imageButtonToolbarSubmit.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View view) {                answerConfirmation();            }        });        imageButtonToolbarEdit.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View view) {                Bundle bundleAnimation = ActivityOptions.makeCustomAnimation(getApplicationContext(), R.anim.animation_one, R.anim.animation_two).toBundle();                Intent addIntent = new Intent(getApplicationContext(), AddGoalActivity.class);                addIntent.putExtra("map", goal_);                addIntent.putExtra(General.TITLE, getApplicationContext().getResources().getString(R.string.edit));                startActivity(addIntent, bundleAnimation);                finish();            }        });        imageButtonToolbarDelete.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View view) {                if (goal_.getIs_dashboard() != 1)                    deleteConfirmation();            }        });    }    // TODO : Delete Comfirmation Dialog Open When Click on Delete Button on Bottom Navigation    private void deleteConfirmation() {        final Dialog dialog = new Dialog(this);        dialog.requestWindowFeature(Window.FEATURE_NO_TITLE);        dialog.setContentView(R.layout.delete_confirmation);        Objects.requireNonNull(dialog.getWindow()).setBackgroundDrawable(new ColorDrawable(android.graphics.Color.TRANSPARENT));        TextView title = (TextView) dialog.findViewById(R.id.delete_confirmation_title);        TextView subTitle = (TextView) dialog.findViewById(R.id.delete_confirmation_sub_title);        subTitle.setText(this.getResources().getString(R.string.delete_goal_confirmation));        title.setText(this.getResources().getString(R.string.action_confirmation));        TextView okButton = (TextView) dialog.findViewById(R.id.delete_confirmation_ok_button);        okButton.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                dialog.dismiss();                // TODO : Api Call when click on OK Button on Dailog                deleteGoal();            }        });        AppCompatImageButton cancelButton = (AppCompatImageButton) dialog.findViewById(R.id.delete_confirmation_cancel_button);        cancelButton.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                dialog.dismiss();            }        });        dialog.show();    }    // TODO : Api called for Delete Goal    private void deleteGoal() {        HashMap<String, String> requestMap = new HashMap<>();        requestMap.put(General.ACTION, Actions_.REMOVE_GOAL);        requestMap.put(General.ID, String.valueOf(goal_.getId()));        String url = Preferences.get(General.DOMAIN) + "/" + Urls_.MOBILE_SELF_GOAL;        RequestBody requestBody = NetworkCall_.make(requestMap, url, TAG, SageSelfGoalDetailActivity.this, this);        String response;        if (requestBody != null) {            try {                response = NetworkCall_.post(url, requestBody, TAG, SageSelfGoalDetailActivity.this, this);                if (response != null) {                    JsonObject jsonObject = GetJson_.getJson(response);                    JsonArray jsonArray = jsonObject.getAsJsonArray(Actions_.REMOVE_GOAL);                    if (jsonArray != null) {                        JsonObject jsonObjectRemoveGoal = jsonArray.get(0).getAsJsonObject();                        if (jsonObjectRemoveGoal.has(General.STATUS) && jsonObjectRemoveGoal.get(General.STATUS).getAsInt() == 1) {                            Toast.makeText(this, jsonObjectRemoveGoal.get(General.MSG).getAsString(), Toast.LENGTH_SHORT).show();                            onBackPressed();                        } else {                            Toast.makeText(this, jsonObjectRemoveGoal.get(General.ERROR).getAsString(), Toast.LENGTH_SHORT).show();                        }                    }                }            } catch (Exception e) {                e.printStackTrace();            }        }    }    // TODO : Answer Confirmation Dialog when click on Complete Button on Bottom navigation    private void answerConfirmation() {        final Dialog dialog = new Dialog(this);        dialog.requestWindowFeature(Window.FEATURE_NO_TITLE);        dialog.setContentView(R.layout.self_goal_details_complete_goal_dialog_layout);        assert dialog.getWindow() != null;        dialog.getWindow().setBackgroundDrawable(new ColorDrawable(android.graphics.Color.TRANSPARENT));        ImageView imageViewSelfGoalDetailsCompleteGoalDialogClose = (ImageView) dialog.findViewById(R.id.imageview_selfgoaldetails_completegoaldialog_close);        final CheckedTextView checkboxSelfGoalDetailsCompleteGoalDialogReschedule = (CheckedTextView) dialog.findViewById(R.id.checkbox_selfgoaldetails_completegoaldialog_reschedule);        Button buttonSelfGoalDetailsCompleteGoalDialogYes = (Button) dialog.findViewById(R.id.button_selfgoaldetails_completegoaldialog_yes);        Button buttonSelfGoalDetailsCompleteGoalDialogNo = (Button) dialog.findViewById(R.id.button_selfgoaldetails_completegoaldialog_no);        checkboxSelfGoalDetailsCompleteGoalDialogReschedule.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                if (checkboxSelfGoalDetailsCompleteGoalDialogReschedule.isChecked()) {                    checkboxSelfGoalDetailsCompleteGoalDialogReschedule.setChecked(false);                } else {                    checkboxSelfGoalDetailsCompleteGoalDialogReschedule.setChecked(true);                }            }        });        imageViewSelfGoalDetailsCompleteGoalDialogClose.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                dialog.dismiss();            }        });        buttonSelfGoalDetailsCompleteGoalDialogYes.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                dialog.dismiss();                completeGoal(checkboxSelfGoalDetailsCompleteGoalDialogReschedule.isChecked());            }        });        buttonSelfGoalDetailsCompleteGoalDialogNo.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                dialog.dismiss();            }        });        dialog.show();    }    // TODO : Api Call for CompleteGoal    private void completeGoal(boolean isReschedule) {        int result = 12;        HashMap<String, String> requestMap = new HashMap<>();        requestMap.put(General.ACTION, Actions_.COMPLETE_GOAL);        requestMap.put(General.ID, String.valueOf(goal_.getId()));        requestMap.put(General.GOAL_TYPE, String.valueOf(goal_.getGoal_type()));        requestMap.put(General.STATUS, "1");        requestMap.put("step", "1");        String url = Preferences.get(General.DOMAIN) + "/" + Urls_.MOBILE_SELF_GOAL;        RequestBody requestBody = NetworkCall_.make(requestMap, url, TAG, SageSelfGoalDetailActivity.this, this);        String response;        if (requestBody != null) {            try {                response = NetworkCall_.post(url, requestBody, TAG, SageSelfGoalDetailActivity.this, this);                if (response != null && !response.equalsIgnoreCase("13")) {                    JSONObject jsonObject = new JSONObject(response);                    if (jsonObject.has(Actions_.COMPLETE_GOAL)) {                        //{"complete_goal":[{"msg":"The record has been updated successfully.","status":1}]}                        JSONArray jsonArray = jsonObject.getJSONArray(Actions_.COMPLETE_GOAL);                        JSONObject object = jsonArray.getJSONObject(0);                        if (object.has(General.STATUS)) {                            result = object.getInt(General.STATUS);                        } else {                            result = 11;                        }                    }                }            } catch (Exception e) {                e.printStackTrace();            }        }        switch (result) {            case 1:                ShowToast.successful(this.getResources().getString(R.string.successful), getApplicationContext());                if (isReschedule) {                    Bundle bundleAnimation = ActivityOptions.makeCustomAnimation(getApplicationContext(), R.anim.animation_one, R.anim.animation_two).toBundle();                    Intent addIntent = new Intent(getApplicationContext(), AddGoalActivity.class);                    addIntent.putExtra("map", goal_);                    addIntent.putExtra(General.TITLE, getApplicationContext().getResources().getString(R.string.reschedule_goal));                    startActivity(addIntent, bundleAnimation);                    finish();                } else {                    onBackPressed();                }                break;            case 2:                ShowToast.toast(this.getResources().getString(R.string.action_failed), getApplicationContext());                break;            case 11:                ShowToast.internalErrorOccurred(getApplicationContext());                break;            case 12:                ShowToast.networkError(getApplicationContext());                break;        }    }    // TODO : Get ToDay Date From Calendar    public void getToDayDate() {        Calendar c = Calendar.getInstance();        mYear = c.get(Calendar.YEAR);        mMonth = c.get(Calendar.MONTH);        mDay = c.get(Calendar.DAY_OF_MONTH);        count_date = mYear + "-" + checkDigit(mMonth + 1) + "-" + mDay;//        mTxtDateSelection.setText(count_date);    }    private String checkDigit(int number) {        return number <= 9 ? "0" + number : String.valueOf(number);    }    // TODO : Add Layout For Count    private void addLayout(final CountListModel_ objCountItem) {        //This is Layout of Count list (Yes/No Or count)        final View layout2 = LayoutInflater.from(this).inflate(R.layout.self_goal_details_milestone_item, mLinearLayoutForCountItem, false);        TextView nameTag = (TextView) layout2.findViewById(R.id.selfgoaldetails_milestone_item_name);        TextView dateTag = (TextView) layout2.findViewById(R.id.selfgoaldetails_milestone_item_date); //Date lable in count list        ImageView cancel = (ImageView) layout2.findViewById(R.id.selfgoaldetails_milestone_item_close); //Close icon in count list        if (goal_.getGoal_status() == 1 || goal_.getGoal_status() == 2) {            cancel.setVisibility(View.GONE);            cancel.setEnabled(false);        }//        cancel.setTag(objCountItem.getId());        cancel.setTag(Integer.parseInt(objCountItem.getId()));        if ((Preferences.get(General.DOMAIN_CODE).equalsIgnoreCase(getResources().getString(R.string.sage023)) ||                Preferences.get(General.DOMAIN_CODE).equalsIgnoreCase(getResources().getString(R.string.sage025)) ||                Preferences.get(General.DOMAIN_CODE).equalsIgnoreCase(getResources().getString(R.string.sage030)) ||                Preferences.get(General.DOMAIN_CODE).equalsIgnoreCase(getResources().getString(R.string.sage031)))                && goal_.getGoal_type() == General.GOAL_TYPE_GLOBULE) {            if (objCountItem.getCount().equalsIgnoreCase("1")) {                nameTag.setText("Yes");            } else {                nameTag.setText("No");            }        } else {            nameTag.setText(objCountItem.getCount());        }        if (objCountItem.getOnTime() != null && (isNeedToSetTimeWhileAddingCount || BuildConfig.FLAVOR.equalsIgnoreCase("senjam"))) {            dateTag.setText(GetTime.month_DdYyyy(objCountItem.getOnDate()) + " " + getTime(objCountItem.getOnTime()));        } else {            dateTag.setText(GetTime.month_DdYyyy(objCountItem.getOnDate()));        }//        dateTag.setText(GetTime.month_DdYyyy(objCountItem.getOnDate()));        mLinearLayoutForCountItem.addView(layout2);        toggleCountLayout();        mEditGoalCount.setText("");        mTxtGoalCountDate.setText("");        textViewSelfGoalDetailsActivityCountTime.setText("");        count_time = "00:00:00";        cancel.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                int position = 0;                String id = String.valueOf(v.getTag());                for (int i = 0; i < arryCountList.size(); i++) {                    position = i;                }                // TODO : removeCount api will be called when client we be remove item from list                // TODO : here we have to pass Item Id and id position                removeCount(id, position);            }        });    }    private void toggleCountLayout() {        if (arryCountList.size() == 99) {            mRelativeLayoutCountDate.setVisibility(View.GONE);        } else {            if (goal_.getGoal_status() == 1 || goal_.getGoal_status() == 2) {                mRelativeLayoutCountDate.setVisibility(View.GONE);            } else {                if (CheckRole.isYouth(Integer.parseInt(Preferences.get(General.ROLE_ID)))) {                    if (Preferences.get(General.DOMAIN_CODE).equalsIgnoreCase(getResources().getString(R.string.sage023)) ||                            Preferences.get(General.DOMAIN_CODE).equalsIgnoreCase(getResources().getString(R.string.sage025)) ||                            Preferences.get(General.DOMAIN_CODE).equalsIgnoreCase(getResources().getString(R.string.sage024)) ||                            Preferences.get(General.DOMAIN_CODE).equalsIgnoreCase(getResources().getString(R.string.sage030)) ||                            Preferences.get(General.DOMAIN_CODE).equalsIgnoreCase(getResources().getString(R.string.sage031))) {                        if (mGoalType != General.GOAL_TYPE_GLOBULE && mGoalStatus == General.GOAL_STATUS_TYPE_RUNNING && mGoalCurrentStatus == General.GOAL_STATUS_TYPE_RUNNING) {                            mRelativeLayoutCountDate.setVisibility(View.VISIBLE);                        } else {                            mRelativeLayoutCountDate.setVisibility(View.GONE);                        }                    } else {                        if (mGoalStatus == General.GOAL_STATUS_TYPE_RUNNING && mGoalCurrentStatus == General.GOAL_STATUS_TYPE_RUNNING) {                            mRelativeLayoutCountDate.setVisibility(View.VISIBLE);                        } else {                            mRelativeLayoutCountDate.setVisibility(View.GONE);                        }                    }                } else {                    mRelativeLayoutCountDate.setVisibility(View.GONE);                }            }        }    }    // TODO : get Current Time    public String getTime(String time) {        SimpleDateFormat _24HourSDF = new SimpleDateFormat("HH:mm:ss");        SimpleDateFormat _12HourSDF = new SimpleDateFormat("hh:mm a");        Date _24HourDt = null;        try {            _24HourDt = _24HourSDF.parse(time);        } catch (Exception e) {            e.printStackTrace();        }        return _12HourSDF.format(_24HourDt);    }    // TODO : Api Called For Add Count    private void addCount(String count, String date, boolean isSubmitButtonClicked) {        String time = ""; //convert time 12 hrs format to 24 hrs format        try {            SimpleDateFormat displayFormat = new SimpleDateFormat("HH:mm:ss");            SimpleDateFormat parseFormat = new SimpleDateFormat("hh:mm:ss a");            time = textViewSelfGoalDetailsActivityCountTime.getText().toString().trim();            Date date1 = parseFormat.parse(time);            time = displayFormat.format(date1);        } catch (ParseException e) {            e.printStackTrace();        }        HashMap<String, String> requestMap = new HashMap<>();        requestMap.put(General.ACTION, Actions_.ADD_COUNT);        requestMap.put(General.TIMEZONE, Preferences.get(General.TIMEZONE));        requestMap.put(General.ID, String.valueOf(goal_.getId()));//        if ((Preferences.get(General.DOMAIN_CODE).equalsIgnoreCase(getResources().getString(R.string.sage023)) || Preferences.get(General.DOMAIN_CODE).equalsIgnoreCase(getResources().getString(R.string.sage025))) && goal_.getGoal_type() == 2) {//            requestMap.put("on_date", date);//            requestMap.put("on_time", "00:00:00");//            requestMap.put("answer", "1");//        } else {        if (isNeedToSetTimeWhileAddingCount) {            requestMap.put("on_date", date);            requestMap.put("on_time", time);        } else {            requestMap.put("on_date", date);            requestMap.put("on_time", time);        }        requestMap.put("answer", count);//        }        String url = Preferences.get(General.DOMAIN) + "/" + Urls_.MOBILE_SELF_GOAL;        RequestBody requestBody = NetworkCall_.make(requestMap, url, TAG, SageSelfGoalDetailActivity.this, this);        String response;        String id = "0";        if (requestBody != null) {            try {                response = NetworkCall_.post(url, requestBody, TAG, SageSelfGoalDetailActivity.this, this);                Log.e("AddCountResponse", response);                if (response != null && !response.equalsIgnoreCase("13")) {                    JSONObject jsonObject = new JSONObject(response);                    if (jsonObject.has(Actions_.ADD_COUNT)) {                        JSONArray jsonArray = jsonObject.getJSONArray(Actions_.ADD_COUNT);                        JSONObject object = jsonArray.getJSONObject(0);                        if (object.has(General.ERROR)) {//                            error = object.getString(General.ERROR);                            Toast.makeText(this, object.getString(General.ERROR), Toast.LENGTH_SHORT).show();                        }                        if (object.has(General.ID)) {                            id = object.getString(General.ID);                            CountListModel_ model = new CountListModel_();                            model.setId(id);                            model.setCount(count);                            model.setOnDate(date);                            model.setOnTime(time);                            arryCountList.add(model);                            // TODO : model will be added into arraylist                            addLayout(model); // TODO : object will be passed into layout and set layout                            Toast.makeText(this, object.getString(General.MSG), Toast.LENGTH_SHORT).show();                            if (isSubmitButtonClicked) {                                mTxtYes.setBackground(getResources().getDrawable(R.drawable.radio_yes_selector_green));                                mTxtNo.setBackground(getResources().getDrawable(R.drawable.radio_no_selector_white));                                mTxtYes.setTextColor(getResources().getColor(R.color.white));                                mTxtNo.setTextColor(getResources().getColor(R.color.color_black));                                mYesNoAnswer = mTxtYes.getTag().toString();                                mTxtDateSelection.setText("");                            }                        } else {                            ShowToast.internalErrorOccurred(getApplicationContext());                        }                    }                }            } catch (Exception e) {                e.printStackTrace();                Log.e("AddCountError", e.getMessage());            }        }    }    // TODO : Api Calling for remove Count    private void removeCount(String id, int position) {        HashMap<String, String> requestMap = new HashMap<>();        requestMap.put(General.ACTION, Actions_.REMOVE_COUNT);        requestMap.put(General.ID, id);        String url = Preferences.get(General.DOMAIN) + "/" + Urls_.MOBILE_SELF_GOAL;        RequestBody requestBody = NetworkCall_.make(requestMap, url, TAG, SageSelfGoalDetailActivity.this, this);        String response;        if (requestBody != null) {            try {                response = NetworkCall_.post(url, requestBody, TAG, SageSelfGoalDetailActivity.this, this);                Log.e("removeCount", response);                JsonObject jsonObject = GetJson_.getJson(response);                JsonArray jsonArray = jsonObject.getAsJsonArray(Actions_.REMOVE_COUNT);                if (jsonArray != null) {                    JsonObject jsonObjectRemoveCount = jsonArray.get(0).getAsJsonObject();                    if (jsonObjectRemoveCount.has(General.STATUS) && jsonObjectRemoveCount.get(General.STATUS).getAsInt() == 1) {                        // TODO : if status is 1 then item will be remove from arraylist and view both                        arryCountList.remove(position);                        mLinearLayoutForCountItem.removeViewAt(position);                        //getSelfGoalUpdatedData();                        toggleCountLayout();                        Toast.makeText(this, jsonObjectRemoveCount.get(General.MSG).getAsString(), Toast.LENGTH_SHORT).show();                    } else {                        Toast.makeText(this, jsonObjectRemoveCount.get(General.ERROR).getAsString(), Toast.LENGTH_SHORT).show();                    }                }            } catch (Exception e) {                e.printStackTrace();            }        }    }    @Override    public void setCountTime(String time, String unit) {        count_time = time;        textViewSelfGoalDetailsActivityCountTime.setText(time.trim() + " " + unit);    }    @Override    public void setDurationTime(String time) {    }    // TODO : Api call for get MilestoneList and CountList    private void getList() {        boolean isCount = false;        HashMap<String, String> requestMap = new HashMap<>();        requestMap.put(General.ACTION, Actions_.MILESTONE_LIST);        requestMap.put(General.ID, String.valueOf(goal_.getId()));        String url = Preferences.get(General.DOMAIN) + "/" + Urls_.MOBILE_SELF_GOAL;        RequestBody requestBody = NetworkCall_.make(requestMap, url, TAG, SageSelfGoalDetailActivity.this, this);        if (requestBody != null) {            try {                String response = NetworkCall_.post(url, requestBody, TAG, SageSelfGoalDetailActivity.this, this);                Log.e("Response", "" + response);                if (response != null && !response.equalsIgnoreCase("13")) {                    JSONObject jsonObject = new JSONObject(response);                    if (jsonObject.has(Actions_.MILESTONE_LIST)) {                        JSONArray jsonArray = jsonObject.getJSONArray(General.COUNT_LIST);                        for (int i = 0; i < jsonArray.length(); i++) {                            JSONObject object = jsonArray.getJSONObject(i);                            if (object.getInt(General.STATUS) == 1) {                                isCount = true;                                CountListModel_ model = new CountListModel_();                                model.setId(object.getString(General.ID));                                model.setCount(object.getString(General.COUNT));                                model.setOnDate(object.getString(General.ON_DATE));                                model.setOnTime(object.getString(General.ON_TIME));//                                model.setStatus(object.getInt(General.STATUS));                                arryCountList.add(model);                            }                        }                        JSONArray milestoneArray = jsonObject.getJSONArray(Actions_.MILESTONE_LIST);                        for (int i = 0; i < milestoneArray.length(); i++) {                            JSONObject object = milestoneArray.getJSONObject(i);                            if (object.getInt(General.STATUS) == 1) {                                String id = object.getString(General.ID);                                String name = object.getString(General.NAME);                                String check = object.getString(General.CHECK);                                String date = object.getString("date");                                HashMap<String, String> map = new HashMap<>();                                map.put(General.ID, id);                                map.put(General.CHECK, check);                                if (check.equalsIgnoreCase("1")) {                                    map.put(General.IS_SELECTED, "1");                                } else {                                    map.put(General.IS_SELECTED, "0");                                }                                map.put(General.NAME, name);                                map.put(General.START_DATE, date);                                milestoneList.add(map);                            }                        }                    }                    if (milestoneList != null && milestoneList.size() > 0) {                        mLinearLayoutMileStone.setVisibility(View.VISIBLE);                        mTxtMileStoneCount.setText(String.valueOf(milestoneList.size()));                        mImageViewMileStoneNext.setEnabled(true);                    } else {                        mImageViewMileStoneNext.setEnabled(false);                        mLinearLayoutMileStone.setVisibility(View.GONE);                    }                    if (isCount && CheckRole.isYouth(Integer.parseInt(Preferences.get(General.ROLE_ID)))) {                        for (int i = 0; i < arryCountList.size(); i++) {                            addLayout(arryCountList.get(i));                        }                    }                    return;                }            } catch (Exception e) {                e.printStackTrace();            }        }        ShowToast.internalErrorOccurred(getApplicationContext());    }    @SuppressLint("CommitTransaction")    private void openMilestoneFragment() {        FragmentTransaction fragmentTransaction = getFragmentManager().beginTransaction();        Fragment frag = getFragmentManager().findFragmentByTag(General.MILESTONE);        if (frag != null) {            fragmentTransaction.remove(frag);        }        fragmentTransaction.addToBackStack(null);        DialogFragment dialogFrag = new MilestoneDialogFragment();        Bundle bundle = new Bundle();        bundle.putSerializable(General.MILESTONE, milestoneList);        bundle.putString(General.GOAL_STATUS, String.valueOf(goal_.getStatus()));        dialogFrag.setArguments(bundle);        dialogFrag.show(getFragmentManager().beginTransaction(), General.MILESTONE);    }    // TODO : Api call for getting Updated Data    @SuppressLint("LongLogTag")    private void getSelfGoalUpdatedData() {        HashMap<String, String> requestMap = new HashMap<>();        requestMap.put(General.ACTION, Actions_.SELF_GOAL);        requestMap.put(General.ID, String.valueOf(goal_.getId()));        String url = Preferences.get(General.DOMAIN) + "/" + Urls_.MOBILE_DETAILS_CALL;        RequestBody requestBody = NetworkCall_.make(requestMap, url, TAG, SageSelfGoalDetailActivity.this, this);        if (requestBody != null) {            try {                String response = NetworkCall_.post(url, requestBody, TAG, SageSelfGoalDetailActivity.this, this);                Log.e("getSelfGoalUpdatedDataResponse", "" + response);                if (response != null) {//                    JSONObject jsonObject = new JSONObject(response);                    goalArrayList = SelfGoal_.parseSpams(response, Actions_.SELF_GOAL, getApplicationContext(), TAG);                    if (goalArrayList.size() > 0) {                        if (goalArrayList.get(0).getStatus() == 1) {                            mGoalStatus = goalArrayList.get(0).getGoal_status();                            mGoalCurrentStatus = goalArrayList.get(0).getGoal_current_status();                            mGoalType = goalArrayList.get(0).getGoal_type();                            mGoalID = String.valueOf(goalArrayList.get(0).getId());                            if (Preferences.get(General.DOMAIN_CODE).equalsIgnoreCase(getResources().getString(R.string.sage030)) ||                                    Preferences.get(General.DOMAIN_CODE).equalsIgnoreCase(getResources().getString(R.string.sage031))) {                                mMainGoalID = goalArrayList.get(0).getMain_goal_id();                            }                            setDataFunction();                            return;                        }                    }                }            } catch (Exception e) {                e.printStackTrace();            }        }        ShowToast.internalErrorOccurred(getApplicationContext());    }}