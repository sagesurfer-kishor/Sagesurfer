package com.modules.selfgoal;import android.annotation.SuppressLint;import android.content.Intent;import android.os.AsyncTask;import androidx.core.content.ContextCompat;import androidx.appcompat.app.AppCompatActivity;import android.os.Bundle;import androidx.appcompat.widget.AppCompatImageButton;import androidx.appcompat.widget.Toolbar;import android.util.Log;import android.view.LayoutInflater;import android.view.View;import android.view.Window;import android.view.WindowManager;import android.widget.Button;import android.widget.ImageView;import android.widget.LinearLayout;import android.widget.RelativeLayout;import android.widget.TextView;import android.widget.Toast;import com.bumptech.glide.Glide;import com.bumptech.glide.load.engine.DiskCacheStrategy;import com.bumptech.glide.request.RequestOptions;import com.google.gson.JsonArray;import com.google.gson.JsonObject;import com.modules.selfgoal.werhope_self_goal.activity.GoalLogBookActivity;import com.modules.selfgoal.werhope_self_goal.activity.HourlyDailyLogBookActivity;import com.sagesurfer.collaborativecares.R;import com.sagesurfer.constant.Actions_;import com.sagesurfer.constant.General;import com.sagesurfer.datetime.GetTime;import com.sagesurfer.library.CheckRole;import com.sagesurfer.library.GetColor;import com.sagesurfer.models.Goal_;import com.sagesurfer.network.NetworkCall_;import com.sagesurfer.network.Urls_;import com.sagesurfer.parser.GetJson_;import com.sagesurfer.parser.SelfGoal_;import com.sagesurfer.snack.ShowToast;import com.storage.preferences.AddGoalPreferences;import com.storage.preferences.Preferences;import org.json.JSONArray;import org.json.JSONObject;import java.text.ParseException;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.Calendar;import java.util.Date;import java.util.HashMap;import java.util.Locale;import okhttp3.RequestBody;public class SenjamSelfGoalDetailActivity extends AppCompatActivity {    private static final String TAG = SenjamSelfGoalDetailActivity.class.getSimpleName();    private TextView mTxtGoalName, mTxtGoalDate, mTxtGoalDescription, mTxtQuestion, mTxtDateSelection;    private TextView mTxtYes, mTxtNo, mTxtAm, mTxtPm;    private Goal_ goal_;    private String am_msg, pm_msg, mAmPmAnswer, mYesNoAnswer;    private String count_date = "";    private int mYear = 0, mMonth = 0, mDay = 0;    private int sYear, sMonth, sDay;    private LinearLayout mLinearLayoutForCountItem, mLinearLayoutSubmit, mLinearLayoutYesNo, mLinearLayoutAmPm, mLinearLayoutMsgTitle, mLinearLayoutDividerLine;    private ArrayList<CountListModel_> arryCountList = new ArrayList<>();    private ArrayList<HashMap<String, String>> milestoneList = new ArrayList<>();    private String mTodayDate = "", mGoalID, mMainGoalID;    private Button mButtonSubmit;    private int mGoalCurrentStatus, mGoalStatus, mGoalType;    private RelativeLayout mRelativeLayoutChooseDate;    private Date CurrentDate, StartDate;    private String mCurrentDate;    private SimpleDateFormat sdfDate;    private ImageView mImageViewSelfGoalDetailImage;    private Toolbar activityToolbar;    private AppCompatImageButton imageButtonToolbarSubmit, imageButtonToolbarEdit, imagebuttonLogBook, imageButtonToolbarDelete;    private ArrayList<Goal_> goalArrayList = new ArrayList<>();    @SuppressLint("RestrictedApi")    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        //For setting status bar color        Window window = getWindow();        window.clearFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);        window.addFlags(WindowManager.LayoutParams.FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS);        window.setStatusBarColor(ContextCompat.getColor(this, GetColor.getHomeIconBackgroundColorColorParse(false)));        this.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_HIDDEN);        setContentView(R.layout.senjam_self_goal_layout);        activityToolbar = (Toolbar) findViewById(R.id.activity_toolbar_layout);        setSupportActionBar(activityToolbar);        assert getSupportActionBar() != null;        getSupportActionBar().setDisplayHomeAsUpEnabled(true);        getSupportActionBar().setDefaultDisplayHomeAsUpEnabled(false);        activityToolbar.setNavigationIcon(R.drawable.vi_left_arrow_white);        activityToolbar.setNavigationOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                onBackPressed();            }        });        intiFunction();        Intent data = getIntent();        if (data != null && data.hasExtra(Actions_.MY_GOAL)) {            goal_ = (Goal_) data.getSerializableExtra(Actions_.MY_GOAL);            am_msg = goal_.getAm_msg();            pm_msg = goal_.getPm_msg();            mGoalID = String.valueOf(goal_.getId());            mMainGoalID = goal_.getMain_goal_id();            mGoalCurrentStatus = goal_.getGoal_current_status();            mGoalStatus = goal_.getGoal_status();            mGoalType = goal_.getGoal_type();        }        setDataFunction();        onClickEvent();    }    // TODO : Initialize All Variable in this Function    private void intiFunction() {        mTxtGoalName = findViewById(R.id.txt_goal_name);        mTxtGoalDate = findViewById(R.id.txt_goal_date);        mTxtGoalDescription = findViewById(R.id.txt_goal_description);        mTxtQuestion = findViewById(R.id.txt_question);        mTxtDateSelection = findViewById(R.id.txt_choose_date);        mLinearLayoutForCountItem = findViewById(R.id.linearlayout_create_goal_count_item);        mLinearLayoutDividerLine = findViewById(R.id.linear_layout_divider_line);        mLinearLayoutYesNo = findViewById(R.id.linear_layout_yes_no);        mLinearLayoutAmPm = findViewById(R.id.linear_layout_am_pm);        mLinearLayoutMsgTitle = findViewById(R.id.linear_msg_title);        mRelativeLayoutChooseDate = findViewById(R.id.relative_choose_date);        mLinearLayoutSubmit = findViewById(R.id.submit_btn_layout);        mButtonSubmit = findViewById(R.id.button_submit);        mTxtYes = findViewById(R.id.txt_yes);        mTxtNo = findViewById(R.id.txt_no);        mTxtAm = findViewById(R.id.txt_am);        mTxtPm = findViewById(R.id.txt_pm);        mImageViewSelfGoalDetailImage = findViewById(R.id.imageview_selfgoaldetailsactivity_image);        imagebuttonLogBook = findViewById(R.id.imagebutton_log_book);        imageButtonToolbarSubmit = findViewById(R.id.imagebutton_toolbar_submit);        imageButtonToolbarEdit = findViewById(R.id.imagebutton_toolbar_edit);        imageButtonToolbarDelete = findViewById(R.id.imagebutton_toolbar_delete);    }    // TODO : Set All Data into this Function    private void setDataFunction() {        getToDayDate();        mTodayDate = mTxtDateSelection.getText().toString();        mTxtGoalName.setText(goal_.getName());        // TODO : date when goal is started and goal is Ended        String start_date = GetTime.month_DdYyyy(goal_.getStart_date());        String end_date = GetTime.month_DdYyyy(goal_.getEnd_date());        mTxtGoalDate.setText(start_date + " to " + end_date);        String frequency = goal_.getFrequency();        dateFunction(start_date);        String[] time = goal_.getStart_time().split(":");        AddGoalPreferences.save(General.NAME, goal_.getName(), TAG);        AddGoalPreferences.save(General.START_MINUTE, time[1], TAG);        AddGoalPreferences.save(General.START_HOUR, time[0], TAG);        // TODO : set sentence        mTxtGoalDescription.setText(CreateSentence_.make_sentence(String.valueOf(goal_.getType()),                String.valueOf(goal_.getQuantity()), goal_.getUnits(), frequency,                goal_.getStart_date(), goal_.getEnd_date(),                goal_.getFrequency_unit(), String.valueOf(goal_.getOccurrences())));        if (goal_.getImage() != null) {            Glide.with(getApplicationContext())                    .load(goal_.getImage())                    .apply(new RequestOptions()                            .placeholder(R.drawable.ic_goal_placeholder)                            .diskCacheStrategy(DiskCacheStrategy.ALL)) //.RESULT                    .into(mImageViewSelfGoalDetailImage);        }        mTxtQuestion.setText(am_msg);        mYesNoAnswer = mTxtYes.getTag().toString();        mAmPmAnswer = mTxtAm.getText().toString();        getList();        if (CheckRole.isYouth(Integer.parseInt(Preferences.get(General.ROLE_ID)))) {            imagebuttonLogBook.setVisibility(View.VISIBLE);            // TODO : if GoalStatus and Current GoalStatus is Equale to GOAL_STATUS_TYPE_RUNNING then below all section will be Visible otherwise it will be Hide            if (mGoalStatus == General.GOAL_STATUS_TYPE_RUNNING && mGoalCurrentStatus == General.GOAL_STATUS_TYPE_RUNNING) {                mLinearLayoutYesNo.setVisibility(View.VISIBLE);                mLinearLayoutAmPm.setVisibility(View.VISIBLE);                mRelativeLayoutChooseDate.setVisibility(View.VISIBLE);                mButtonSubmit.setVisibility(View.VISIBLE);                mLinearLayoutDividerLine.setVisibility(View.VISIBLE);            } else {                mLinearLayoutYesNo.setVisibility(View.GONE);                mLinearLayoutAmPm.setVisibility(View.GONE);                mRelativeLayoutChooseDate.setVisibility(View.GONE);                mButtonSubmit.setVisibility(View.GONE);                mLinearLayoutDividerLine.setVisibility(View.GONE);                mTxtQuestion.setVisibility(View.VISIBLE);            }            // TODO : if Current Date is before Date than Msg section will be Visible otherwise it will be hide            if (CurrentDate.before(StartDate)) {                mLinearLayoutMsgTitle.setVisibility(View.VISIBLE);            } else {                mLinearLayoutMsgTitle.setVisibility(View.GONE);            }        } else {            imagebuttonLogBook.setVisibility(View.GONE);        }    }    private void dateFunction(String start_date) {        sdfDate = new SimpleDateFormat("MMM dd, yyyy");        Date now = new Date();        mCurrentDate = sdfDate.format(now);        try {            CurrentDate = sdfDate.parse(mCurrentDate);            StartDate = sdfDate.parse(start_date);            Log.e("CurrentDate", "" + CurrentDate);            Log.e("StartDate", "" + StartDate);        } catch (ParseException e) {            e.printStackTrace();        }    }    // TODO : All Click Event Function e.g (yes or no  &&&&  am or pm  &&&&  submit button)    private void onClickEvent() {        mTxtYes.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View view) {                mTxtYes.setBackground(getResources().getDrawable(R.drawable.radio_yes_selector_green));                mTxtNo.setBackground(getResources().getDrawable(R.drawable.radio_no_selector_white));                mTxtYes.setTextColor(getResources().getColor(R.color.white));                mTxtNo.setTextColor(getResources().getColor(R.color.color_black));                mYesNoAnswer = mTxtYes.getTag().toString();            }        });        mTxtNo.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View view) {                mTxtNo.setBackground(getResources().getDrawable(R.drawable.radio_no_selector_green));                mTxtYes.setBackground(getResources().getDrawable(R.drawable.radio_yes_selector_white));                mTxtNo.setTextColor(getResources().getColor(R.color.white));                mTxtYes.setTextColor(getResources().getColor(R.color.color_black));                mYesNoAnswer = mTxtNo.getTag().toString();            }        });        mTxtAm.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View view) {                mTxtAm.setBackground(getResources().getDrawable(R.drawable.radio_yes_selector_green));                mTxtPm.setBackground(getResources().getDrawable(R.drawable.radio_no_selector_white));                mTxtAm.setTextColor(getResources().getColor(R.color.white));                mTxtPm.setTextColor(getResources().getColor(R.color.color_black));                mAmPmAnswer = mTxtAm.getText().toString();                mTxtQuestion.setText(am_msg);            }        });        mTxtPm.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View view) {                mTxtPm.setBackground(getResources().getDrawable(R.drawable.radio_no_selector_green));                mTxtAm.setBackground(getResources().getDrawable(R.drawable.radio_yes_selector_white));                mTxtPm.setTextColor(getResources().getColor(R.color.white));                mTxtAm.setTextColor(getResources().getColor(R.color.color_black));                mAmPmAnswer = mTxtPm.getText().toString();                mTxtQuestion.setText(pm_msg);            }        });        mButtonSubmit.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View view) {                dailyDosingAnswerAPICalled(mYesNoAnswer, mGoalID, mTodayDate, mMainGoalID, mAmPmAnswer);            }        });        imagebuttonLogBook.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View view) {                if (goal_.getFrequency().equalsIgnoreCase("hour")) {                    Intent logBook = new Intent(getApplicationContext(), HourlyDailyLogBookActivity.class);                    logBook.putExtra("map", goal_);                    startActivity(logBook);                    finish();                } else {                    Intent logBook = new Intent(getApplicationContext(), GoalLogBookActivity.class);                    logBook.putExtra("map", goal_);                    startActivity(logBook);                    finish();                }            }        });    }    // TODO : Get ToDay Date From Calendar    public void getToDayDate() {        Calendar c = Calendar.getInstance();        mYear = c.get(Calendar.YEAR);        mMonth = c.get(Calendar.MONTH);        mDay = c.get(Calendar.DAY_OF_MONTH);        count_date = mYear + "-" + checkDigit(mMonth + 1) + "-" + mDay;        mTxtDateSelection.setText(count_date);    }    private String checkDigit(int number) {        return number <= 9 ? "0" + number : String.valueOf(number);    }    // TODO : APi Call for Add Answer for Daily Dosing Compliance    @SuppressLint({"SetTextI18n", "LongLogTag"})    private void dailyDosingAnswerAPICalled(String answerID, String goalID, String onDate, String mainGoalID, String AM_PM) {        HashMap<String, String> requestMap = new HashMap<>();        requestMap.put(General.ACTION, Actions_.ADD_ANSWER_SENJAM);        requestMap.put(General.ANSWER, answerID);        requestMap.put(General.GOAL_ID, goalID);        requestMap.put(General.ON_DATE, onDate);        requestMap.put(General.GOAL_AM_PM, AM_PM);        requestMap.put(General.MAIN_GOAL_ID, mainGoalID);        requestMap.put(General.USER_ID, Preferences.get(General.USER_ID));        Log.e("requestMap", requestMap.toString());        String url = Preferences.get(General.DOMAIN) + Urls_.MOBILE_SELF_GOAL;        RequestBody requestBody = NetworkCall_.make(requestMap, url, TAG, this, this);        if (requestBody != null) {            try {                String response = NetworkCall_.post(url, requestBody, TAG, this, this);                Log.e("PdailyDosingAnswerResponse", "" + response);                if (response != null) {                    JsonObject jsonObject = GetJson_.getJson(response);                    JsonObject jsonDailyDosing = jsonObject.getAsJsonObject(Actions_.ADD_ANSWER_SENJAM);                    if (jsonDailyDosing.get(General.STATUS).getAsInt() == 1) {                        SimpleDateFormat sdf = new SimpleDateFormat("HH:mm:ss", Locale.US);                        String time1 = sdf.format(new Date());                        CountListModel_ model = new CountListModel_();                        model.setId(jsonDailyDosing.get(General.ID).toString());                        model.setCount(answerID);                        model.setOnDate(onDate);                        model.setOnTime(time1);                        arryCountList.add(model);                        addLayout(model);                        Toast.makeText(this, jsonDailyDosing.get(General.MSG).getAsString(), Toast.LENGTH_SHORT).show();//                        dialog.dismiss();                    } else {                        Toast.makeText(this, jsonDailyDosing.get(General.ERROR).getAsString(), Toast.LENGTH_SHORT).show();                    }                } else {                    Toast.makeText(this, "Internal Error Occur..!", Toast.LENGTH_SHORT).show();                }            } catch (Exception e) {                e.printStackTrace();//                Log.e("errorDailyDosingActivity", ""+e.getMessage());            }        }    }    // TODO : Add Layout For Count    private void addLayout(final CountListModel_ objCountItem) {        //This is Layout of Count list (Yes/No Or count)        final View layout2 = LayoutInflater.from(this).inflate(R.layout.self_goal_details_milestone_item, mLinearLayoutForCountItem, false);        TextView nameTag = (TextView) layout2.findViewById(R.id.selfgoaldetails_milestone_item_name);        TextView dateTag = (TextView) layout2.findViewById(R.id.selfgoaldetails_milestone_item_date); //Date lable in count list        ImageView cancel = (ImageView) layout2.findViewById(R.id.selfgoaldetails_milestone_item_close); //Close icon in count list        if (goal_.getGoal_status() == 1 || goal_.getGoal_status() == 2) {            cancel.setVisibility(View.GONE);            cancel.setEnabled(false);        }        cancel.setTag(objCountItem.getId());        if (objCountItem.getCount().equalsIgnoreCase("1")) {            nameTag.setText("Yes");        } else {            nameTag.setText("No");        }        dateTag.setText(GetTime.month_DdYyyy(objCountItem.getOnDate()) + " " + getTime(objCountItem.getOnTime()));        mLinearLayoutForCountItem.addView(layout2);        cancel.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                //int position = (Integer) v.getTag();//                String IdofInput = (String) v.getTag();                int position = 0;                String id = String.valueOf(v.getTag());//                int position = objCountItem.getId().indexOf(IdofInput);                for (int i = 0; i < arryCountList.size(); i++) {                    if (arryCountList.get(i).getId().equalsIgnoreCase(id))                        position = i;                }                removeCount(id, position);            }        });    }    // TODO : get Current Time    public String getTime(String time) {        SimpleDateFormat _24HourSDF = new SimpleDateFormat("HH:mm:ss");        SimpleDateFormat _12HourSDF = new SimpleDateFormat("hh:mm a");        Date _24HourDt = null;        try {            _24HourDt = _24HourSDF.parse(time);        } catch (Exception e) {            e.printStackTrace();        }        return _12HourSDF.format(_24HourDt);    }    // TODO : Api Calling for remove Count    private void removeCount(String id, int position) {        HashMap<String, String> requestMap = new HashMap<>();        requestMap.put(General.ACTION, Actions_.REMOVE_COUNT);        requestMap.put(General.ID, id);        String url = Preferences.get(General.DOMAIN) + "/" + Urls_.MOBILE_SELF_GOAL;        RequestBody requestBody = NetworkCall_.make(requestMap, url, TAG, SenjamSelfGoalDetailActivity.this, this);        String response;        if (requestBody != null) {            try {                response = NetworkCall_.post(url, requestBody, TAG, SenjamSelfGoalDetailActivity.this, this);                Log.e("removeCount", response);                JsonObject jsonObject = GetJson_.getJson(response);                JsonArray jsonArray = jsonObject.getAsJsonArray(Actions_.REMOVE_COUNT);                if (jsonArray != null) {                    JsonObject jsonObjectRemoveCount = jsonArray.get(0).getAsJsonObject();                    if (jsonObjectRemoveCount.has(General.STATUS) && jsonObjectRemoveCount.get(General.STATUS).getAsInt() == 1) {                        // TODO : if status is 1 then item will be remove from arraylist and view both                        arryCountList.remove(position);                        mLinearLayoutForCountItem.removeViewAt(position);                        // getSelfGoalUpdatedData();//                        toggleCountLayout();                        Toast.makeText(this, jsonObjectRemoveCount.get(General.MSG).getAsString(), Toast.LENGTH_SHORT).show();                    } else {                        Toast.makeText(this, jsonObjectRemoveCount.get(General.ERROR).getAsString(), Toast.LENGTH_SHORT).show();                    }                }            } catch (Exception e) {                e.printStackTrace();            }        }    }    private class CountOperation extends AsyncTask<String, Void, Integer> {        boolean isAdd = false;        boolean isRemove = false;        String id = "0";        String error = "";        @Override        protected Integer doInBackground(String... params) {            try {                String response = params[0];                if (response == null) {                    return 11;                } else {                    JSONObject jsonObject = new JSONObject(response);                    if (jsonObject.has(Actions_.ADD_COUNT)) {                        isAdd = true;                        JSONArray jsonArray = jsonObject.getJSONArray(Actions_.ADD_COUNT);                        JSONObject object = jsonArray.getJSONObject(0);                        if (object.has(General.ERROR)) {                            error = object.getString(General.ERROR);                        }                        if (object.has(General.ID)) {                            id = object.getString(General.ID);//                            countIdArray.add(id);                            //return object.getInt(General.STATUS);                            return object.getInt(General.ID); //Successfully added & return generated ID                        } else {                            //return object.getInt(General.STATUS);                            return 0; //Error in adding count                        }                    } else if (jsonObject.has(Actions_.REMOVE_COUNT)) {                        isAdd = false;                        JSONArray jsonArray = jsonObject.getJSONArray(Actions_.REMOVE_COUNT);                        JSONObject object = jsonArray.getJSONObject(0);                        return object.getInt(General.STATUS);                    } else if (jsonObject.has(Actions_.REMOVE_GOAL)) {                        isRemove = true;                        JSONArray jsonArray = jsonObject.getJSONArray(Actions_.REMOVE_GOAL);                        JSONObject object = jsonArray.getJSONObject(0);                        if (object.has(General.STATUS)) {                            id = object.getString(General.STATUS);                            if (object.has(General.ERROR)) {                                error = object.getString(General.ERROR);                            }                            return object.getInt(General.STATUS);                        }                    }                }            } catch (Exception e) {                e.printStackTrace();            }            return 0;        }        @Override        protected void onPostExecute(Integer integer) {            super.onPostExecute(integer);            switch (integer) {                case 1:                    //ShowToast.successful("Successful", getApplicationContext());//                    mTxtDateSelection.setText("");                    if (isAdd) {                        //countIdArray.add(id);                    }                    if (isRemove) {                        onBackPressed();                    }                    break;                case 2:                    ShowToast.toast("Action Failed", getApplicationContext());                    break;                case 3:                    ShowToast.toast(error, getApplicationContext());                    break;                case 11:                    ShowToast.internalErrorOccurred(getApplicationContext());                    break;                case 12:                    ShowToast.networkError(getApplicationContext());                    break;            }        }    }    // TODO : Api call for get MilestoneList and CountList    private void getList() {        boolean isCount = false;        HashMap<String, String> requestMap = new HashMap<>();        requestMap.put(General.ACTION, Actions_.MILESTONE_LIST);        requestMap.put(General.ID, String.valueOf(goal_.getId()));        String url = Preferences.get(General.DOMAIN) + "/" + Urls_.MOBILE_SELF_GOAL;        RequestBody requestBody = NetworkCall_.make(requestMap, url, TAG, SenjamSelfGoalDetailActivity.this, this);        if (requestBody != null) {            try {                String response = NetworkCall_.post(url, requestBody, TAG, SenjamSelfGoalDetailActivity.this, this);                Log.e("Response", "" + response);                if (response != null && !response.equalsIgnoreCase("13")) {                    JSONObject jsonObject = new JSONObject(response);                    if (jsonObject.has(Actions_.MILESTONE_LIST)) {                        JSONArray jsonArray = jsonObject.getJSONArray(General.COUNT_LIST);                        for (int i = 0; i < jsonArray.length(); i++) {                            JSONObject object = jsonArray.getJSONObject(i);                            if (object.getInt(General.STATUS) == 1) {                                isCount = true;                                CountListModel_ model = new CountListModel_();                                model.setId(object.getString(General.ID));                                model.setCount(object.getString(General.COUNT));                                model.setOnDate(object.getString(General.ON_DATE));                                model.setOnTime(object.getString(General.ON_TIME));//                                model.setStatus(object.getInt(General.STATUS));                                arryCountList.add(model);                            }                        }                        JSONArray milestoneArray = jsonObject.getJSONArray(Actions_.MILESTONE_LIST);                        for (int i = 0; i < milestoneArray.length(); i++) {                            JSONObject object = milestoneArray.getJSONObject(i);                            if (object.getInt(General.STATUS) == 1) {                                String id = object.getString(General.ID);                                String name = object.getString(General.NAME);                                String check = object.getString(General.CHECK);                                String date = object.getString("date");                                HashMap<String, String> map = new HashMap<>();                                map.put(General.ID, id);                                map.put(General.CHECK, check);                                if (check.equalsIgnoreCase("1")) {                                    map.put(General.IS_SELECTED, "1");                                } else {                                    map.put(General.IS_SELECTED, "0");                                }                                map.put(General.NAME, name);                                map.put(General.START_DATE, date);                                milestoneList.add(map);                            }                        }                    }//                    if (milestoneList != null && milestoneList.size() > 0) {//                        relativeLayoutSelfGoalDetailsActivityMilestoneFooter.setVisibility(View.VISIBLE);//                        textViewSelfGoalDetailsActivityiMlestoneCount.setText(String.valueOf(milestoneList.size()));//                        imageViewSelfGoalDetailsActivityMilestoneNext.setEnabled(true);//                    } else {//                        imageViewSelfGoalDetailsActivityMilestoneNext.setEnabled(false);//                        relativeLayoutSelfGoalDetailsActivityMilestoneFooter.setVisibility(View.GONE);//                    }                    if (isCount && CheckRole.isYouth(Integer.parseInt(Preferences.get(General.ROLE_ID)))) {                        for (int i = 0; i < arryCountList.size(); i++) {                            addLayout(arryCountList.get(i));                        }                    }                    return;                }            } catch (Exception e) {                e.printStackTrace();            }        }        ShowToast.internalErrorOccurred(getApplicationContext());    }    // TODO : Api call for getting Updated Data    @SuppressLint("LongLogTag")    private void getSelfGoalUpdatedData() {        HashMap<String, String> requestMap = new HashMap<>();        requestMap.put(General.ACTION, Actions_.SELF_GOAL);        requestMap.put(General.ID, String.valueOf(goal_.getId()));        String url = Preferences.get(General.DOMAIN) + "/" + Urls_.MOBILE_DETAILS_CALL;        RequestBody requestBody = NetworkCall_.make(requestMap, url, TAG, SenjamSelfGoalDetailActivity.this, this);        if (requestBody != null) {            try {                String response = NetworkCall_.post(url, requestBody, TAG, SenjamSelfGoalDetailActivity.this, this);                Log.e("getSelfGoalUpdatedDataResponse", "" + response);                if (response != null) {//                    JSONObject jsonObject = new JSONObject(response);                    goalArrayList = SelfGoal_.parseSpams(response, Actions_.SELF_GOAL, getApplicationContext(), TAG);                    if (goalArrayList.size() > 0) {                        if (goalArrayList.get(0).getStatus() == 1) {                            mGoalStatus = goalArrayList.get(0).getGoal_status();                            mGoalCurrentStatus = goalArrayList.get(0).getGoal_current_status();                            mGoalType = goalArrayList.get(0).getGoal_type();                            mGoalID = String.valueOf(goalArrayList.get(0).getId());                            am_msg = goalArrayList.get(0).getAm_msg();                            pm_msg = goalArrayList.get(0).getPm_msg();                            if (Preferences.get(General.DOMAIN_CODE).equalsIgnoreCase(getResources().getString(R.string.sage030)) ||                                    Preferences.get(General.DOMAIN_CODE).equalsIgnoreCase(getResources().getString(R.string.sage031))) {                                mMainGoalID = goalArrayList.get(0).getMain_goal_id();                            }                            setDataFunction();//                            if (mGoalStatus == General.GOAL_STATUS_TYPE_RUNNING && mGoalCurrentStatus == General.GOAL_STATUS_TYPE_RUNNING) {//                                relativeLaypoutSelfGoalDetailsActivityCount.setVisibility(View.GONE);//                                YesNoAnswer.setVisibility(View.VISIBLE);//                                AmPmAnswer.setVisibility(View.VISIBLE);//                                ChooseDate.setVisibility(View.VISIBLE);//                                submitBtnLayout.setVisibility(View.VISIBLE);////                                SimpleDateFormat sdf = new SimpleDateFormat("HH:mm:ss", Locale.US);////                                String time1 = sdf.format(new Date());////                                addLayout("0", count_date, true, String.valueOf(goalArrayList.get(0).getId()), getTime(time1));//                                yes.setChecked(true);//                                no.setChecked(false);//                                am.setChecked(true);//                                pm.setChecked(false);//                                relativeLaypoutSelfGoalDetailsActivityCount.setVisibility(View.GONE);//                            }else {//                                relativeLaypoutSelfGoalDetailsActivityCount.setVisibility(View.GONE);//                                YesNoAnswer.setVisibility(View.GONE);//                                AmPmAnswer.setVisibility(View.GONE);//                                ChooseDate.setVisibility(View.GONE);//                                submitBtnLayout.setVisibility(View.GONE);//                                QuestionOnly.setVisibility(View.VISIBLE);//                            }                            return;                        }                    }                }            } catch (Exception e) {                e.printStackTrace();            }        }        ShowToast.internalErrorOccurred(getApplicationContext());    }}